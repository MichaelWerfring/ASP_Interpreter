//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/Desktop/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/ANTLR/ASP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IASPListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ASPBaseListener : IASPListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] ASPParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] ASPParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuery([NotNull] ASPParser.QueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuery([NotNull] ASPParser.QueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatements([NotNull] ASPParser.StatementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatements([NotNull] ASPParser.StatementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] ASPParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] ASPParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHead([NotNull] ASPParser.HeadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.head"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHead([NotNull] ASPParser.HeadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBody([NotNull] ASPParser.BodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBody([NotNull] ASPParser.BodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.naf_literals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNaf_literals([NotNull] ASPParser.Naf_literalsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.naf_literals"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNaf_literals([NotNull] ASPParser.Naf_literalsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.naf_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNaf_literal([NotNull] ASPParser.Naf_literalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.naf_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNaf_literal([NotNull] ASPParser.Naf_literalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.classical_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassical_literal([NotNull] ASPParser.Classical_literalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.classical_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassical_literal([NotNull] ASPParser.Classical_literalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.binary_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinary_operation([NotNull] ASPParser.Binary_operationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.binary_operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinary_operation([NotNull] ASPParser.Binary_operationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>equalityOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityOperation([NotNull] ASPParser.EqualityOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>equalityOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityOperation([NotNull] ASPParser.EqualityOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>disunificationOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDisunificationOperation([NotNull] ASPParser.DisunificationOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>disunificationOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDisunificationOperation([NotNull] ASPParser.DisunificationOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessOperation([NotNull] ASPParser.LessOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessOperation([NotNull] ASPParser.LessOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterOperation([NotNull] ASPParser.GreaterOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterOperation([NotNull] ASPParser.GreaterOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessOrEqOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessOrEqOperation([NotNull] ASPParser.LessOrEqOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessOrEqOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessOrEqOperation([NotNull] ASPParser.LessOrEqOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterOrEqOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterOrEqOperation([NotNull] ASPParser.GreaterOrEqOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterOrEqOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterOrEqOperation([NotNull] ASPParser.GreaterOrEqOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>isOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsOperation([NotNull] ASPParser.IsOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>isOperation</c>
	/// labeled alternative in <see cref="ASPParser.binary_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsOperation([NotNull] ASPParser.IsOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ASPParser.terms"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerms([NotNull] ASPParser.TermsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ASPParser.terms"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerms([NotNull] ASPParser.TermsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>negatedTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegatedTerm([NotNull] ASPParser.NegatedTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>negatedTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegatedTerm([NotNull] ASPParser.NegatedTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringTerm([NotNull] ASPParser.StringTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringTerm([NotNull] ASPParser.StringTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>basicTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicTerm([NotNull] ASPParser.BasicTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>basicTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicTerm([NotNull] ASPParser.BasicTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>arithmeticOperationTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArithmeticOperationTerm([NotNull] ASPParser.ArithmeticOperationTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>arithmeticOperationTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArithmeticOperationTerm([NotNull] ASPParser.ArithmeticOperationTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedTerm([NotNull] ASPParser.ParenthesizedTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedTerm([NotNull] ASPParser.ParenthesizedTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>anonymousVariableTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnonymousVariableTerm([NotNull] ASPParser.AnonymousVariableTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>anonymousVariableTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnonymousVariableTerm([NotNull] ASPParser.AnonymousVariableTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberTerm([NotNull] ASPParser.NumberTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberTerm([NotNull] ASPParser.NumberTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableTerm([NotNull] ASPParser.VariableTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableTerm</c>
	/// labeled alternative in <see cref="ASPParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableTerm([NotNull] ASPParser.VariableTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>plusOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlusOperation([NotNull] ASPParser.PlusOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>plusOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlusOperation([NotNull] ASPParser.PlusOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>minusOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMinusOperation([NotNull] ASPParser.MinusOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>minusOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMinusOperation([NotNull] ASPParser.MinusOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>timesOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimesOperation([NotNull] ASPParser.TimesOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>timesOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimesOperation([NotNull] ASPParser.TimesOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>divOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivOperation([NotNull] ASPParser.DivOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>divOperation</c>
	/// labeled alternative in <see cref="ASPParser.arithop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivOperation([NotNull] ASPParser.DivOperationContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
