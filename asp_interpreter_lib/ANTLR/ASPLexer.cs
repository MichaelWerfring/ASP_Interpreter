//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/FH/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/ANTLR/ASPLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, EXP_OPEN=2, EXP=3, NUMBER=4, ANONYMOUS_VARIABLE=5, DOT=6, COMMA=7, 
		QUERY_SYMBOL=8, SEMICOLON=9, OR=10, NAF=11, CONS=12, PLUS=13, MINUS=14, 
		TIMES=15, POW=16, DIV=17, AT=18, PAREN_OPEN=19, PAREN_CLOSE=20, SQUARE_OPEN=21, 
		SQUARE_CLOSE=22, CURLY_OPEN=23, CURLY_CLOSE=24, EQUAL=25, LESS=26, GREATER=27, 
		LESS_OR_EQ=28, GREATER_OR_EQ=29, DISUNIFICATION=30, IS=31, ID=32, VARIABLE=33, 
		COMMENT=34, MULTI_LINE_COMMENT=35, NEWLINE=36, WS=37, EXP_VAR=38, EXP_TEXT=39, 
		EXP_CLOSE=40, EXP_VAR_OPEN=41, EXP_VAR_CLOSE=42;
	public const int
		EXP_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXP_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "EXP_OPEN", "EXP", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", "COMMA", 
		"QUERY_SYMBOL", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", "TIMES", 
		"POW", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
		"CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", "COMMENT", 
		"MULTI_LINE_COMMENT", "NEWLINE", "WS", "EXP_VAR", "EXP_TEXT", "EXP_CLOSE", 
		"EXP_VAR_OPEN", "EXP_VAR_CLOSE"
	};


	public ASPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ASPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'::'", null, "'_'", "'.'", "','", "'?-'", "';'", "'|'", 
		"'not'", "':-'", "'+'", "'-'", "'*'", "'**'", "'/'", "'@'", "'('", null, 
		"'['", "']'", "'{'", "'}'", "'='", "'<'", "'>'", "'<='", "'>='", "'\\='", 
		"'is'", null, null, null, null, null, null, null, null, null, "'@('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "EXP_OPEN", "EXP", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", 
		"COMMA", "QUERY_SYMBOL", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", 
		"TIMES", "POW", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", 
		"LESS_OR_EQ", "GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", 
		"COMMENT", "MULTI_LINE_COMMENT", "NEWLINE", "WS", "EXP_VAR", "EXP_TEXT", 
		"EXP_CLOSE", "EXP_VAR_OPEN", "EXP_VAR_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,245,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		1,0,1,0,4,0,89,8,0,11,0,12,0,90,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,3,3,110,8,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
		30,1,31,1,31,5,31,177,8,31,10,31,12,31,180,9,31,1,32,1,32,5,32,184,8,32,
		10,32,12,32,187,9,32,1,33,1,33,5,33,191,8,33,10,33,12,33,194,9,33,1,33,
		1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,204,8,34,10,34,12,34,207,9,34,
		1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,4,36,219,8,36,11,36,
		12,36,220,1,36,1,36,1,37,1,37,5,37,227,8,37,10,37,12,37,230,9,37,1,38,
		4,38,233,8,38,11,38,12,38,234,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
		1,41,1,205,0,42,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,
		12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,48,
		24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,35,72,
		36,74,37,76,38,78,39,80,40,82,41,84,42,2,0,1,10,2,0,34,34,92,92,1,0,48,
		48,1,0,49,57,1,0,48,57,1,0,97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,
		90,3,0,10,10,13,13,63,63,3,0,9,10,13,13,32,32,5,0,10,10,40,41,46,46,58,
		58,64,64,253,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,
		0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,
		22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,
		0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,
		0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,
		1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,
		0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,1,76,
		1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,0,2,86,1,0,0,
		0,4,94,1,0,0,0,6,98,1,0,0,0,8,109,1,0,0,0,10,111,1,0,0,0,12,113,1,0,0,
		0,14,115,1,0,0,0,16,117,1,0,0,0,18,120,1,0,0,0,20,122,1,0,0,0,22,124,1,
		0,0,0,24,128,1,0,0,0,26,131,1,0,0,0,28,133,1,0,0,0,30,135,1,0,0,0,32,137,
		1,0,0,0,34,140,1,0,0,0,36,142,1,0,0,0,38,144,1,0,0,0,40,146,1,0,0,0,42,
		148,1,0,0,0,44,150,1,0,0,0,46,152,1,0,0,0,48,154,1,0,0,0,50,156,1,0,0,
		0,52,158,1,0,0,0,54,160,1,0,0,0,56,162,1,0,0,0,58,165,1,0,0,0,60,168,1,
		0,0,0,62,171,1,0,0,0,64,174,1,0,0,0,66,181,1,0,0,0,68,188,1,0,0,0,70,199,
		1,0,0,0,72,213,1,0,0,0,74,218,1,0,0,0,76,224,1,0,0,0,78,232,1,0,0,0,80,
		236,1,0,0,0,82,240,1,0,0,0,84,243,1,0,0,0,86,88,5,34,0,0,87,89,8,0,0,0,
		88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,
		92,93,5,34,0,0,93,3,1,0,0,0,94,95,3,6,2,0,95,96,1,0,0,0,96,97,6,1,0,0,
		97,5,1,0,0,0,98,99,5,58,0,0,99,100,5,58,0,0,100,7,1,0,0,0,101,110,7,1,
		0,0,102,106,7,2,0,0,103,105,7,3,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,
		104,1,0,0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,109,101,1,
		0,0,0,109,102,1,0,0,0,110,9,1,0,0,0,111,112,5,95,0,0,112,11,1,0,0,0,113,
		114,5,46,0,0,114,13,1,0,0,0,115,116,5,44,0,0,116,15,1,0,0,0,117,118,5,
		63,0,0,118,119,5,45,0,0,119,17,1,0,0,0,120,121,5,59,0,0,121,19,1,0,0,0,
		122,123,5,124,0,0,123,21,1,0,0,0,124,125,5,110,0,0,125,126,5,111,0,0,126,
		127,5,116,0,0,127,23,1,0,0,0,128,129,5,58,0,0,129,130,5,45,0,0,130,25,
		1,0,0,0,131,132,5,43,0,0,132,27,1,0,0,0,133,134,5,45,0,0,134,29,1,0,0,
		0,135,136,5,42,0,0,136,31,1,0,0,0,137,138,5,42,0,0,138,139,5,42,0,0,139,
		33,1,0,0,0,140,141,5,47,0,0,141,35,1,0,0,0,142,143,5,64,0,0,143,37,1,0,
		0,0,144,145,5,40,0,0,145,39,1,0,0,0,146,147,5,41,0,0,147,41,1,0,0,0,148,
		149,5,91,0,0,149,43,1,0,0,0,150,151,5,93,0,0,151,45,1,0,0,0,152,153,5,
		123,0,0,153,47,1,0,0,0,154,155,5,125,0,0,155,49,1,0,0,0,156,157,5,61,0,
		0,157,51,1,0,0,0,158,159,5,60,0,0,159,53,1,0,0,0,160,161,5,62,0,0,161,
		55,1,0,0,0,162,163,5,60,0,0,163,164,5,61,0,0,164,57,1,0,0,0,165,166,5,
		62,0,0,166,167,5,61,0,0,167,59,1,0,0,0,168,169,5,92,0,0,169,170,5,61,0,
		0,170,61,1,0,0,0,171,172,5,105,0,0,172,173,5,115,0,0,173,63,1,0,0,0,174,
		178,7,4,0,0,175,177,7,5,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,
		0,0,0,178,179,1,0,0,0,179,65,1,0,0,0,180,178,1,0,0,0,181,185,7,6,0,0,182,
		184,7,5,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,
		0,0,0,186,67,1,0,0,0,187,185,1,0,0,0,188,192,5,37,0,0,189,191,8,7,0,0,
		190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,
		1,0,0,0,194,192,1,0,0,0,195,196,7,7,0,0,196,197,1,0,0,0,197,198,6,33,1,
		0,198,69,1,0,0,0,199,200,5,37,0,0,200,201,5,42,0,0,201,205,1,0,0,0,202,
		204,9,0,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,206,1,0,0,0,205,203,1,
		0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,42,0,0,209,210,5,37,0,
		0,210,211,1,0,0,0,211,212,6,34,1,0,212,71,1,0,0,0,213,214,7,7,0,0,214,
		215,1,0,0,0,215,216,6,35,1,0,216,73,1,0,0,0,217,219,7,8,0,0,218,217,1,
		0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,
		222,223,6,36,1,0,223,75,1,0,0,0,224,228,7,6,0,0,225,227,7,5,0,0,226,225,
		1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,77,1,0,0,0,
		230,228,1,0,0,0,231,233,8,9,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,
		1,0,0,0,234,235,1,0,0,0,235,79,1,0,0,0,236,237,3,12,5,0,237,238,1,0,0,
		0,238,239,6,39,2,0,239,81,1,0,0,0,240,241,5,64,0,0,241,242,5,40,0,0,242,
		83,1,0,0,0,243,244,5,41,0,0,244,85,1,0,0,0,12,0,1,90,106,109,178,185,192,
		205,220,228,234,3,5,1,0,6,0,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
