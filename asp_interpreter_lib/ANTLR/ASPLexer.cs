//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/FH/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/ANTLR/ASPLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, SHOW=2, EXP_OPEN=3, EXP=4, NUMBER=5, ANONYMOUS_VARIABLE=6, DOT=7, 
		COMMA=8, QUERY_SYMBOL=9, SEMICOLON=10, OR=11, NAF=12, CONS=13, PLUS=14, 
		MINUS=15, TIMES=16, POW=17, DIV=18, AT=19, PAREN_OPEN=20, PAREN_CLOSE=21, 
		SQUARE_OPEN=22, SQUARE_CLOSE=23, CURLY_OPEN=24, CURLY_CLOSE=25, EQUAL=26, 
		LESS=27, GREATER=28, LESS_OR_EQ=29, GREATER_OR_EQ=30, DISUNIFICATION=31, 
		IS=32, ID=33, VARIABLE=34, COMMENT=35, MULTI_LINE_COMMENT=36, NEWLINE=37, 
		WS=38, EXP_VAR=39, EXP_TEXT=40, EXP_CLOSE=41, EXP_VAR_OPEN=42, EXP_VAR_CLOSE=43;
	public const int
		EXP_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EXP_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "SHOW", "EXP_OPEN", "EXP", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", 
		"COMMA", "QUERY_SYMBOL", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", 
		"TIMES", "POW", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", 
		"LESS_OR_EQ", "GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", 
		"COMMENT", "MULTI_LINE_COMMENT", "NEWLINE", "WS", "EXP_VAR", "EXP_TEXT", 
		"EXP_CLOSE", "EXP_VAR_OPEN", "EXP_VAR_CLOSE"
	};


	public ASPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ASPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'#show'", null, "'::'", null, "'_'", "'.'", "','", "'?-'", 
		"';'", "'|'", "'not'", "':-'", "'+'", "'-'", "'*'", "'**'", "'/'", "'@'", 
		"'('", null, "'['", "']'", "'{'", "'}'", "'='", "'<'", "'>'", "'<='", 
		"'>='", "'\\='", "'is'", null, null, null, null, null, null, null, null, 
		null, "'@('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "SHOW", "EXP_OPEN", "EXP", "NUMBER", "ANONYMOUS_VARIABLE", 
		"DOT", "COMMA", "QUERY_SYMBOL", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", 
		"MINUS", "TIMES", "POW", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", 
		"LESS_OR_EQ", "GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", 
		"COMMENT", "MULTI_LINE_COMMENT", "NEWLINE", "WS", "EXP_VAR", "EXP_TEXT", 
		"EXP_CLOSE", "EXP_VAR_OPEN", "EXP_VAR_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,43,253,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,1,0,1,0,4,0,91,8,0,11,0,12,0,92,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,5,4,113,8,4,10,4,12,4,116,
		9,4,3,4,118,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
		1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,5,32,185,8,32,10,32,
		12,32,188,9,32,1,33,1,33,5,33,192,8,33,10,33,12,33,195,9,33,1,34,1,34,
		5,34,199,8,34,10,34,12,34,202,9,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
		1,35,5,35,212,8,35,10,35,12,35,215,9,35,1,35,1,35,1,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,37,4,37,227,8,37,11,37,12,37,228,1,37,1,37,1,38,1,38,
		5,38,235,8,38,10,38,12,38,238,9,38,1,39,4,39,241,8,39,11,39,12,39,242,
		1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,213,0,43,2,1,4,2,6,3,8,
		4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,12,26,13,28,14,30,15,32,16,34,
		17,36,18,38,19,40,20,42,21,44,22,46,23,48,24,50,25,52,26,54,27,56,28,58,
		29,60,30,62,31,64,32,66,33,68,34,70,35,72,36,74,37,76,38,78,39,80,40,82,
		41,84,42,86,43,2,0,1,10,2,0,34,34,92,92,1,0,48,48,1,0,49,57,1,0,48,57,
		1,0,97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,90,3,0,10,10,13,13,63,63,
		3,0,9,10,13,13,32,32,5,0,10,10,40,41,46,46,58,58,64,64,261,0,2,1,0,0,0,
		0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,
		0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,
		26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,
		0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,
		0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,
		1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,
		0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,1,78,1,0,0,0,1,80,
		1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,0,1,86,1,0,0,0,2,88,1,0,0,0,4,96,1,0,0,
		0,6,102,1,0,0,0,8,106,1,0,0,0,10,117,1,0,0,0,12,119,1,0,0,0,14,121,1,0,
		0,0,16,123,1,0,0,0,18,125,1,0,0,0,20,128,1,0,0,0,22,130,1,0,0,0,24,132,
		1,0,0,0,26,136,1,0,0,0,28,139,1,0,0,0,30,141,1,0,0,0,32,143,1,0,0,0,34,
		145,1,0,0,0,36,148,1,0,0,0,38,150,1,0,0,0,40,152,1,0,0,0,42,154,1,0,0,
		0,44,156,1,0,0,0,46,158,1,0,0,0,48,160,1,0,0,0,50,162,1,0,0,0,52,164,1,
		0,0,0,54,166,1,0,0,0,56,168,1,0,0,0,58,170,1,0,0,0,60,173,1,0,0,0,62,176,
		1,0,0,0,64,179,1,0,0,0,66,182,1,0,0,0,68,189,1,0,0,0,70,196,1,0,0,0,72,
		207,1,0,0,0,74,221,1,0,0,0,76,226,1,0,0,0,78,232,1,0,0,0,80,240,1,0,0,
		0,82,244,1,0,0,0,84,248,1,0,0,0,86,251,1,0,0,0,88,90,5,34,0,0,89,91,8,
		0,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,94,1,
		0,0,0,94,95,5,34,0,0,95,3,1,0,0,0,96,97,5,35,0,0,97,98,5,115,0,0,98,99,
		5,104,0,0,99,100,5,111,0,0,100,101,5,119,0,0,101,5,1,0,0,0,102,103,3,8,
		3,0,103,104,1,0,0,0,104,105,6,2,0,0,105,7,1,0,0,0,106,107,5,58,0,0,107,
		108,5,58,0,0,108,9,1,0,0,0,109,118,7,1,0,0,110,114,7,2,0,0,111,113,7,3,
		0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
		118,1,0,0,0,116,114,1,0,0,0,117,109,1,0,0,0,117,110,1,0,0,0,118,11,1,0,
		0,0,119,120,5,95,0,0,120,13,1,0,0,0,121,122,5,46,0,0,122,15,1,0,0,0,123,
		124,5,44,0,0,124,17,1,0,0,0,125,126,5,63,0,0,126,127,5,45,0,0,127,19,1,
		0,0,0,128,129,5,59,0,0,129,21,1,0,0,0,130,131,5,124,0,0,131,23,1,0,0,0,
		132,133,5,110,0,0,133,134,5,111,0,0,134,135,5,116,0,0,135,25,1,0,0,0,136,
		137,5,58,0,0,137,138,5,45,0,0,138,27,1,0,0,0,139,140,5,43,0,0,140,29,1,
		0,0,0,141,142,5,45,0,0,142,31,1,0,0,0,143,144,5,42,0,0,144,33,1,0,0,0,
		145,146,5,42,0,0,146,147,5,42,0,0,147,35,1,0,0,0,148,149,5,47,0,0,149,
		37,1,0,0,0,150,151,5,64,0,0,151,39,1,0,0,0,152,153,5,40,0,0,153,41,1,0,
		0,0,154,155,5,41,0,0,155,43,1,0,0,0,156,157,5,91,0,0,157,45,1,0,0,0,158,
		159,5,93,0,0,159,47,1,0,0,0,160,161,5,123,0,0,161,49,1,0,0,0,162,163,5,
		125,0,0,163,51,1,0,0,0,164,165,5,61,0,0,165,53,1,0,0,0,166,167,5,60,0,
		0,167,55,1,0,0,0,168,169,5,62,0,0,169,57,1,0,0,0,170,171,5,60,0,0,171,
		172,5,61,0,0,172,59,1,0,0,0,173,174,5,62,0,0,174,175,5,61,0,0,175,61,1,
		0,0,0,176,177,5,92,0,0,177,178,5,61,0,0,178,63,1,0,0,0,179,180,5,105,0,
		0,180,181,5,115,0,0,181,65,1,0,0,0,182,186,7,4,0,0,183,185,7,5,0,0,184,
		183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,67,1,0,
		0,0,188,186,1,0,0,0,189,193,7,6,0,0,190,192,7,5,0,0,191,190,1,0,0,0,192,
		195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,69,1,0,0,0,195,193,1,0,
		0,0,196,200,5,37,0,0,197,199,8,7,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,
		198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,7,
		7,0,0,204,205,1,0,0,0,205,206,6,34,1,0,206,71,1,0,0,0,207,208,5,37,0,0,
		208,209,5,42,0,0,209,213,1,0,0,0,210,212,9,0,0,0,211,210,1,0,0,0,212,215,
		1,0,0,0,213,214,1,0,0,0,213,211,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,
		0,216,217,5,42,0,0,217,218,5,37,0,0,218,219,1,0,0,0,219,220,6,35,1,0,220,
		73,1,0,0,0,221,222,7,7,0,0,222,223,1,0,0,0,223,224,6,36,1,0,224,75,1,0,
		0,0,225,227,7,8,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,
		229,1,0,0,0,229,230,1,0,0,0,230,231,6,37,1,0,231,77,1,0,0,0,232,236,7,
		6,0,0,233,235,7,5,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,
		236,237,1,0,0,0,237,79,1,0,0,0,238,236,1,0,0,0,239,241,8,9,0,0,240,239,
		1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,81,1,0,0,0,
		244,245,3,14,6,0,245,246,1,0,0,0,246,247,6,40,2,0,247,83,1,0,0,0,248,249,
		5,64,0,0,249,250,5,40,0,0,250,85,1,0,0,0,251,252,5,41,0,0,252,87,1,0,0,
		0,12,0,1,92,114,117,186,193,200,213,228,236,242,3,5,1,0,6,0,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
