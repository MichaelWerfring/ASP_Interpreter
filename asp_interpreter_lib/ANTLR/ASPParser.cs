//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ASP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, NUMBER=2, ANONYMOUS_VARIABLE=3, DOT=4, COMMA=5, QUERY_SYMBOL=6, 
		COLON=7, SEMICOLON=8, OR=9, NAF=10, CONS=11, PLUS=12, MINUS=13, TIMES=14, 
		POW=15, DIV=16, AT=17, PAREN_OPEN=18, PAREN_CLOSE=19, SQUARE_OPEN=20, 
		SQUARE_CLOSE=21, CURLY_OPEN=22, CURLY_CLOSE=23, EQUAL=24, LESS=25, GREATER=26, 
		LESS_OR_EQ=27, GREATER_OR_EQ=28, DISUNIFICATION=29, IS=30, ID=31, VARIABLE=32, 
		COMMENT=33, MULTI_LINE_COMMENT=34, BLANK=35, NEWLINE=36, TAB=37, WS=38;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_goal = 4, RULE_binary_operation = 5, RULE_literal = 6, RULE_binary_operator = 7, 
		RULE_terms = 8, RULE_term = 9, RULE_list = 10, RULE_arithop = 11;
	public static readonly string[] ruleNames = {
		"program", "query", "statements", "statement", "goal", "binary_operation", 
		"literal", "binary_operator", "terms", "term", "list", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'_'", "'.'", "','", "'?-'", "':'", "';'", "'|'", "'not'", 
		"':-'", "'+'", "'-'", "'*'", "'**'", "'/'", "'@'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", "'<'", "'>'", "'<='", "'>='", "'\\='", "'is'", 
		null, null, null, null, null, null, "'\\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", "COMMA", "QUERY_SYMBOL", 
		"COLON", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", "TIMES", "POW", 
		"DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
		"CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", "COMMENT", 
		"MULTI_LINE_COMMENT", "BLANK", "NEWLINE", "TAB", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ASPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ASPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			statements();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUERY_SYMBOL) {
				{
				State = 25;
				query();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(ASPParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext[] goal() {
			return GetRuleContexts<GoalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal(int i) {
			return GetRuleContext<GoalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(QUERY_SYMBOL);
			State = 29;
			goal();
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 30;
				Match(COMMA);
				State = 31;
				goal();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147494912L) != 0)) {
				{
				{
				State = 39;
				statement();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(ASPParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext[] goal() {
			return GetRuleContexts<GoalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal(int i) {
			return GetRuleContext<GoalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				Match(CONS);
				State = 46;
				goal();
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 47;
					Match(COMMA);
					State = 48;
					goal();
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 54;
				Match(DOT);
				}
				break;
			case NAF:
			case MINUS:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				literal();
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 57;
					Match(CONS);
					{
					State = 58;
					goal();
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 59;
						Match(COMMA);
						State = 60;
						goal();
						}
						}
						State = 65;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
				}

				State = 68;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operationContext binary_operation() {
			return GetRuleContext<Binary_operationContext>(0);
		}
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterGoal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitGoal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(Context, State);
		EnterRule(_localctx, 8, RULE_goal);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				binary_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public Binary_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterBinary_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitBinary_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operationContext binary_operation() {
		Binary_operationContext _localctx = new Binary_operationContext(Context, State);
		EnterRule(_localctx, 10, RULE_binary_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			term(0);
			State = 77;
			binary_operator();
			State = 78;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(ASPParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAF) {
				{
				State = 80;
				Match(NAF);
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 83;
				Match(MINUS);
				}
			}

			State = 86;
			Match(ID);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAREN_OPEN) {
				{
				State = 87;
				Match(PAREN_OPEN);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
					{
					State = 88;
					terms();
					}
				}

				State = 91;
				Match(PAREN_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
	 
		public Binary_operatorContext() { }
		public virtual void CopyFrom(Binary_operatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(ASPParser.LESS_OR_EQ, 0); }
		public LessOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterLessOrEqOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitLessOrEqOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(ASPParser.GREATER_OR_EQ, 0); }
		public GreaterOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterGreaterOrEqOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitGreaterOrEqOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(ASPParser.IS, 0); }
		public IsOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterIsOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitIsOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisunificationOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISUNIFICATION() { return GetToken(ASPParser.DISUNIFICATION, 0); }
		public DisunificationOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterDisunificationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitDisunificationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisunificationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ASPParser.LESS, 0); }
		public LessOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterLessOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitLessOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ASPParser.GREATER, 0); }
		public GreaterOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterGreaterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitGreaterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ASPParser.EQUAL, 0); }
		public EqualityOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterEqualityOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitEqualityOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_binary_operator);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				_localctx = new EqualityOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(EQUAL);
				}
				break;
			case DISUNIFICATION:
				_localctx = new DisunificationOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				Match(DISUNIFICATION);
				}
				break;
			case LESS:
				_localctx = new LessOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				Match(LESS);
				}
				break;
			case GREATER:
				_localctx = new GreaterOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 97;
				Match(GREATER);
				}
				break;
			case LESS_OR_EQ:
				_localctx = new LessOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 98;
				Match(LESS_OR_EQ);
				}
				break;
			case GREATER_OR_EQ:
				_localctx = new GreaterOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				Match(GREATER_OR_EQ);
				}
				break;
			case IS:
				_localctx = new IsOperationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				Match(IS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ASPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 16, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			term(0);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 104;
				Match(COMMA);
				State = 105;
				terms();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegatedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NegatedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterNegatedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitNegatedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ASPParser.STRING, 0); }
		public StringTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterStringTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitStringTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public BasicTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterBasicTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitBasicTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticOperationTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public ArithmeticOperationTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterArithmeticOperationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitArithmeticOperationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousVariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS_VARIABLE() { return GetToken(ASPParser.ANONYMOUS_VARIABLE, 0); }
		public AnonymousVariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterAnonymousVariableTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitAnonymousVariableTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ASPParser.NUMBER, 0); }
		public NumberTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterNumberTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitNumberTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ASPParser.VARIABLE, 0); }
		public VariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterVariableTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitVariableTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterListTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitListTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new BasicTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 109;
				Match(ID);
				State = 115;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 110;
					Match(PAREN_OPEN);
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
						{
						State = 111;
						terms();
						}
					}

					State = 114;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				Match(STRING);
				}
				break;
			case VARIABLE:
				{
				_localctx = new VariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(VARIABLE);
				}
				break;
			case ANONYMOUS_VARIABLE:
				{
				_localctx = new AnonymousVariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				Match(ANONYMOUS_VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				_localctx = new ParenthesizedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(PAREN_OPEN);
				State = 122;
				term(0);
				State = 123;
				Match(PAREN_CLOSE);
				}
				break;
			case MINUS:
				{
				_localctx = new NegatedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				Match(MINUS);
				State = 126;
				term(3);
				}
				break;
			case SQUARE_OPEN:
				{
				_localctx = new ListTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationTermContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 130;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 131;
					arithop();
					State = 132;
					term(2);
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
	 
		public ListContext() { }
		public virtual void CopyFrom(ListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConventionalListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public ConventionalListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterConventionalList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitConventionalList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConventionalList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecursiveListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ASPParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		public RecursiveListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterRecursiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitRecursiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursiveList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 20, RULE_list);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ConventionalListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				Match(SQUARE_OPEN);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
					{
					State = 140;
					terms();
					}
				}

				State = 143;
				Match(SQUARE_CLOSE);
				}
				break;
			case 2:
				_localctx = new RecursiveListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				Match(SQUARE_OPEN);
				State = 145;
				term(0);
				State = 146;
				Match(OR);
				State = 147;
				term(0);
				State = 148;
				Match(SQUARE_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
	 
		public ArithopContext() { }
		public virtual void CopyFrom(ArithopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimesOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ASPParser.TIMES, 0); }
		public TimesOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterTimesOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitTimesOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		public MinusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterMinusOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitMinusOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ASPParser.POW, 0); }
		public PowerOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterPowerOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitPowerOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ASPParser.PLUS, 0); }
		public PlusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterPlusOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitPlusOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ASPParser.DIV, 0); }
		public DivOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.EnterDivOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IASPListener typedListener = listener as IASPListener;
			if (typedListener != null) typedListener.ExitDivOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithop);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new MinusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				Match(MINUS);
				}
				break;
			case TIMES:
				_localctx = new TimesOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				Match(TIMES);
				}
				break;
			case DIV:
				_localctx = new DivOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155;
				Match(DIV);
				}
				break;
			case POW:
				_localctx = new PowerOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156;
				Match(POW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,160,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,3,0,27,8,0,1,1,1,1,1,1,
		1,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,1,1,1,2,5,2,41,8,2,10,2,12,2,44,9,
		2,1,3,1,3,1,3,1,3,5,3,50,8,3,10,3,12,3,53,9,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,5,3,62,8,3,10,3,12,3,65,9,3,3,3,67,8,3,1,3,1,3,3,3,71,8,3,1,4,1,4,
		3,4,75,8,4,1,5,1,5,1,5,1,5,1,6,3,6,82,8,6,1,6,3,6,85,8,6,1,6,1,6,1,6,3,
		6,90,8,6,1,6,3,6,93,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,102,8,7,1,8,1,
		8,1,8,3,8,107,8,8,1,9,1,9,1,9,1,9,3,9,113,8,9,1,9,3,9,116,8,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,129,8,9,1,9,1,9,1,9,1,9,5,9,135,
		8,9,10,9,12,9,138,9,9,1,10,1,10,3,10,142,8,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,151,8,10,1,11,1,11,1,11,1,11,1,11,3,11,158,8,11,1,11,0,
		1,18,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,182,0,24,1,0,0,0,2,28,1,0,0,
		0,4,42,1,0,0,0,6,70,1,0,0,0,8,74,1,0,0,0,10,76,1,0,0,0,12,81,1,0,0,0,14,
		101,1,0,0,0,16,103,1,0,0,0,18,128,1,0,0,0,20,150,1,0,0,0,22,157,1,0,0,
		0,24,26,3,4,2,0,25,27,3,2,1,0,26,25,1,0,0,0,26,27,1,0,0,0,27,1,1,0,0,0,
		28,29,5,6,0,0,29,34,3,8,4,0,30,31,5,5,0,0,31,33,3,8,4,0,32,30,1,0,0,0,
		33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,
		37,38,5,4,0,0,38,3,1,0,0,0,39,41,3,6,3,0,40,39,1,0,0,0,41,44,1,0,0,0,42,
		40,1,0,0,0,42,43,1,0,0,0,43,5,1,0,0,0,44,42,1,0,0,0,45,46,5,11,0,0,46,
		51,3,8,4,0,47,48,5,5,0,0,48,50,3,8,4,0,49,47,1,0,0,0,50,53,1,0,0,0,51,
		49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,4,0,0,55,
		71,1,0,0,0,56,66,3,12,6,0,57,58,5,11,0,0,58,63,3,8,4,0,59,60,5,5,0,0,60,
		62,3,8,4,0,61,59,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,
		67,1,0,0,0,65,63,1,0,0,0,66,57,1,0,0,0,66,67,1,0,0,0,67,68,1,0,0,0,68,
		69,5,4,0,0,69,71,1,0,0,0,70,45,1,0,0,0,70,56,1,0,0,0,71,7,1,0,0,0,72,75,
		3,12,6,0,73,75,3,10,5,0,74,72,1,0,0,0,74,73,1,0,0,0,75,9,1,0,0,0,76,77,
		3,18,9,0,77,78,3,14,7,0,78,79,3,18,9,0,79,11,1,0,0,0,80,82,5,10,0,0,81,
		80,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,85,5,13,0,0,84,83,1,0,0,0,84,
		85,1,0,0,0,85,86,1,0,0,0,86,92,5,31,0,0,87,89,5,18,0,0,88,90,3,16,8,0,
		89,88,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,91,93,5,19,0,0,92,87,1,0,0,0,
		92,93,1,0,0,0,93,13,1,0,0,0,94,102,5,24,0,0,95,102,5,29,0,0,96,102,5,25,
		0,0,97,102,5,26,0,0,98,102,5,27,0,0,99,102,5,28,0,0,100,102,5,30,0,0,101,
		94,1,0,0,0,101,95,1,0,0,0,101,96,1,0,0,0,101,97,1,0,0,0,101,98,1,0,0,0,
		101,99,1,0,0,0,101,100,1,0,0,0,102,15,1,0,0,0,103,106,3,18,9,0,104,105,
		5,5,0,0,105,107,3,16,8,0,106,104,1,0,0,0,106,107,1,0,0,0,107,17,1,0,0,
		0,108,109,6,9,-1,0,109,115,5,31,0,0,110,112,5,18,0,0,111,113,3,16,8,0,
		112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,116,5,19,0,0,115,110,
		1,0,0,0,115,116,1,0,0,0,116,129,1,0,0,0,117,129,5,2,0,0,118,129,5,1,0,
		0,119,129,5,32,0,0,120,129,5,3,0,0,121,122,5,18,0,0,122,123,3,18,9,0,123,
		124,5,19,0,0,124,129,1,0,0,0,125,126,5,13,0,0,126,129,3,18,9,3,127,129,
		3,20,10,0,128,108,1,0,0,0,128,117,1,0,0,0,128,118,1,0,0,0,128,119,1,0,
		0,0,128,120,1,0,0,0,128,121,1,0,0,0,128,125,1,0,0,0,128,127,1,0,0,0,129,
		136,1,0,0,0,130,131,10,1,0,0,131,132,3,22,11,0,132,133,3,18,9,2,133,135,
		1,0,0,0,134,130,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,
		0,137,19,1,0,0,0,138,136,1,0,0,0,139,141,5,20,0,0,140,142,3,16,8,0,141,
		140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,151,5,21,0,0,144,145,5,
		20,0,0,145,146,3,18,9,0,146,147,5,9,0,0,147,148,3,18,9,0,148,149,5,21,
		0,0,149,151,1,0,0,0,150,139,1,0,0,0,150,144,1,0,0,0,151,21,1,0,0,0,152,
		158,5,12,0,0,153,158,5,13,0,0,154,158,5,14,0,0,155,158,5,16,0,0,156,158,
		5,15,0,0,157,152,1,0,0,0,157,153,1,0,0,0,157,154,1,0,0,0,157,155,1,0,0,
		0,157,156,1,0,0,0,158,23,1,0,0,0,21,26,34,42,51,63,66,70,74,81,84,89,92,
		101,106,112,115,128,136,141,150,157
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
