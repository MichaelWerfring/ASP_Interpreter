//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/FH/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/ANTLR/ASPParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, EXP_OPEN=2, EXP=3, NUMBER=4, ANONYMOUS_VARIABLE=5, DOT=6, COMMA=7, 
		QUERY_SYMBOL=8, SEMICOLON=9, OR=10, NAF=11, CONS=12, PLUS=13, MINUS=14, 
		TIMES=15, POW=16, DIV=17, AT=18, PAREN_OPEN=19, PAREN_CLOSE=20, SQUARE_OPEN=21, 
		SQUARE_CLOSE=22, CURLY_OPEN=23, CURLY_CLOSE=24, EQUAL=25, LESS=26, GREATER=27, 
		LESS_OR_EQ=28, GREATER_OR_EQ=29, DISUNIFICATION=30, IS=31, ID=32, VARIABLE=33, 
		COMMENT=34, MULTI_LINE_COMMENT=35, NEWLINE=36, WS=37, EXP_VAR=38, EXP_TEXT=39, 
		EXP_CLOSE=40, EXP_VAR_OPEN=41, EXP_VAR_CLOSE=42;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_explanation = 4, RULE_exp_text = 5, RULE_exp_var = 6, RULE_goal = 7, 
		RULE_binary_operation = 8, RULE_literal = 9, RULE_binary_operator = 10, 
		RULE_terms = 11, RULE_term = 12, RULE_list = 13, RULE_arithop = 14;
	public static readonly string[] ruleNames = {
		"program", "query", "statements", "statement", "explanation", "exp_text", 
		"exp_var", "goal", "binary_operation", "literal", "binary_operator", "terms", 
		"term", "list", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'::'", null, "'_'", "'.'", "','", "'?-'", "';'", "'|'", 
		"'not'", "':-'", "'+'", "'-'", "'*'", "'**'", "'/'", "'@'", "'('", null, 
		"'['", "']'", "'{'", "'}'", "'='", "'<'", "'>'", "'<='", "'>='", "'\\='", 
		"'is'", null, null, null, null, null, null, null, null, null, "'@('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "EXP_OPEN", "EXP", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", 
		"COMMA", "QUERY_SYMBOL", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", 
		"TIMES", "POW", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", 
		"LESS_OR_EQ", "GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", 
		"COMMENT", "MULTI_LINE_COMMENT", "NEWLINE", "WS", "EXP_VAR", "EXP_TEXT", 
		"EXP_CLOSE", "EXP_VAR_OPEN", "EXP_VAR_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASPParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ASPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ASPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			statements();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUERY_SYMBOL) {
				{
				State = 31;
				query();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(ASPParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext[] goal() {
			return GetRuleContexts<GoalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal(int i) {
			return GetRuleContext<GoalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(QUERY_SYMBOL);
			State = 35;
			goal();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 36;
				Match(COMMA);
				State = 37;
				goal();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplanationContext[] explanation() {
			return GetRuleContexts<ExplanationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplanationContext explanation(int i) {
			return GetRuleContext<ExplanationContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294989824L) != 0)) {
				{
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 45;
					explanation();
					}
					break;
				}
				State = 48;
				statement();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(ASPParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext[] goal() {
			return GetRuleContexts<GoalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal(int i) {
			return GetRuleContext<GoalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(CONS);
				State = 55;
				goal();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 56;
					Match(COMMA);
					State = 57;
					goal();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 63;
				Match(DOT);
				}
				break;
			case NAF:
			case MINUS:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				literal();
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 66;
					Match(CONS);
					{
					State = 67;
					goal();
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 68;
						Match(COMMA);
						State = 69;
						goal();
						}
						}
						State = 74;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
				}

				State = 77;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplanationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OPEN() { return GetToken(ASPParser.EXP_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_CLOSE() { return GetToken(ASPParser.EXP_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Exp_textContext[] exp_text() {
			return GetRuleContexts<Exp_textContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exp_textContext exp_text(int i) {
			return GetRuleContext<Exp_textContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exp_varContext[] exp_var() {
			return GetRuleContexts<Exp_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exp_varContext exp_var(int i) {
			return GetRuleContext<Exp_varContext>(i);
		}
		public ExplanationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explanation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplanation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplanationContext explanation() {
		ExplanationContext _localctx = new ExplanationContext(Context, State);
		EnterRule(_localctx, 8, RULE_explanation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			literal();
			State = 82;
			Match(EXP_OPEN);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXP_TEXT:
					{
					State = 83;
					exp_text();
					}
					break;
				case EXP_VAR_OPEN:
					{
					State = 84;
					exp_var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXP_TEXT || _la==EXP_VAR_OPEN );
			State = 89;
			Match(EXP_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_TEXT() { return GetToken(ASPParser.EXP_TEXT, 0); }
		public Exp_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_textContext exp_text() {
		Exp_textContext _localctx = new Exp_textContext(Context, State);
		EnterRule(_localctx, 10, RULE_exp_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(EXP_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_VAR_OPEN() { return GetToken(ASPParser.EXP_VAR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_VAR() { return GetToken(ASPParser.EXP_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_VAR_CLOSE() { return GetToken(ASPParser.EXP_VAR_CLOSE, 0); }
		public Exp_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_varContext exp_var() {
		Exp_varContext _localctx = new Exp_varContext(Context, State);
		EnterRule(_localctx, 12, RULE_exp_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(EXP_VAR_OPEN);
			State = 94;
			Match(EXP_VAR);
			State = 95;
			Match(EXP_VAR_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operationContext binary_operation() {
			return GetRuleContext<Binary_operationContext>(0);
		}
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(Context, State);
		EnterRule(_localctx, 14, RULE_goal);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				binary_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public Binary_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operationContext binary_operation() {
		Binary_operationContext _localctx = new Binary_operationContext(Context, State);
		EnterRule(_localctx, 16, RULE_binary_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			term(0);
			State = 102;
			binary_operator();
			State = 103;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(ASPParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAF) {
				{
				State = 105;
				Match(NAF);
				}
			}

			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 108;
				Match(MINUS);
				}
			}

			State = 111;
			Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAREN_OPEN) {
				{
				State = 112;
				Match(PAREN_OPEN);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12887539762L) != 0)) {
					{
					State = 113;
					terms();
					}
				}

				State = 116;
				Match(PAREN_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
	 
		public Binary_operatorContext() { }
		public virtual void CopyFrom(Binary_operatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(ASPParser.LESS_OR_EQ, 0); }
		public LessOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(ASPParser.GREATER_OR_EQ, 0); }
		public GreaterOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(ASPParser.IS, 0); }
		public IsOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisunificationOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISUNIFICATION() { return GetToken(ASPParser.DISUNIFICATION, 0); }
		public DisunificationOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisunificationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ASPParser.LESS, 0); }
		public LessOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ASPParser.GREATER, 0); }
		public GreaterOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ASPParser.EQUAL, 0); }
		public EqualityOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_binary_operator);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				_localctx = new EqualityOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				Match(EQUAL);
				}
				break;
			case DISUNIFICATION:
				_localctx = new DisunificationOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(DISUNIFICATION);
				}
				break;
			case LESS:
				_localctx = new LessOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				Match(LESS);
				}
				break;
			case GREATER:
				_localctx = new GreaterOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				Match(GREATER);
				}
				break;
			case LESS_OR_EQ:
				_localctx = new LessOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				Match(LESS_OR_EQ);
				}
				break;
			case GREATER_OR_EQ:
				_localctx = new GreaterOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				Match(GREATER_OR_EQ);
				}
				break;
			case IS:
				_localctx = new IsOperationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 125;
				Match(IS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ASPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 22, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			term(0);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 129;
				Match(COMMA);
				State = 130;
				terms();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegatedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NegatedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ASPParser.STRING, 0); }
		public StringTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public BasicTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticOperationTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public ArithmeticOperationTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousVariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS_VARIABLE() { return GetToken(ASPParser.ANONYMOUS_VARIABLE, 0); }
		public AnonymousVariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ASPParser.NUMBER, 0); }
		public NumberTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ASPParser.VARIABLE, 0); }
		public VariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new BasicTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 134;
				Match(ID);
				State = 140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 135;
					Match(PAREN_OPEN);
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12887539762L) != 0)) {
						{
						State = 136;
						terms();
						}
					}

					State = 139;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				Match(STRING);
				}
				break;
			case VARIABLE:
				{
				_localctx = new VariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(VARIABLE);
				}
				break;
			case ANONYMOUS_VARIABLE:
				{
				_localctx = new AnonymousVariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145;
				Match(ANONYMOUS_VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				_localctx = new ParenthesizedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146;
				Match(PAREN_OPEN);
				State = 147;
				term(0);
				State = 148;
				Match(PAREN_CLOSE);
				}
				break;
			case MINUS:
				{
				_localctx = new NegatedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(MINUS);
				State = 151;
				term(3);
				}
				break;
			case SQUARE_OPEN:
				{
				_localctx = new ListTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationTermContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 155;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 156;
					arithop();
					State = 157;
					term(2);
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
	 
		public ListContext() { }
		public virtual void CopyFrom(ListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConventionalListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public ConventionalListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConventionalList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecursiveListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ASPParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		public RecursiveListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursiveList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 26, RULE_list);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new ConventionalListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				Match(SQUARE_OPEN);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12887539762L) != 0)) {
					{
					State = 165;
					terms();
					}
				}

				State = 168;
				Match(SQUARE_CLOSE);
				}
				break;
			case 2:
				_localctx = new RecursiveListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(SQUARE_OPEN);
				State = 170;
				term(0);
				State = 171;
				Match(OR);
				State = 172;
				term(0);
				State = 173;
				Match(SQUARE_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
	 
		public ArithopContext() { }
		public virtual void CopyFrom(ArithopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimesOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ASPParser.TIMES, 0); }
		public TimesOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		public MinusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ASPParser.POW, 0); }
		public PowerOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ASPParser.PLUS, 0); }
		public PlusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ASPParser.DIV, 0); }
		public DivOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPParserVisitor<TResult> typedVisitor = visitor as IASPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 28, RULE_arithop);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new MinusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				Match(MINUS);
				}
				break;
			case TIMES:
				_localctx = new TimesOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				Match(TIMES);
				}
				break;
			case DIV:
				_localctx = new DivOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 180;
				Match(DIV);
				}
				break;
			case POW:
				_localctx = new PowerOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 181;
				Match(POW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,185,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,3,0,33,8,0,1,1,1,1,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,1,1,1,
		1,2,3,2,47,8,2,1,2,5,2,50,8,2,10,2,12,2,53,9,2,1,3,1,3,1,3,1,3,5,3,59,
		8,3,10,3,12,3,62,9,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,71,8,3,10,3,12,3,
		74,9,3,3,3,76,8,3,1,3,1,3,3,3,80,8,3,1,4,1,4,1,4,1,4,4,4,86,8,4,11,4,12,
		4,87,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,3,7,100,8,7,1,8,1,8,1,8,1,
		8,1,9,3,9,107,8,9,1,9,3,9,110,8,9,1,9,1,9,1,9,3,9,115,8,9,1,9,3,9,118,
		8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,127,8,10,1,11,1,11,1,11,3,
		11,132,8,11,1,12,1,12,1,12,1,12,3,12,138,8,12,1,12,3,12,141,8,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,154,8,12,1,12,1,
		12,1,12,1,12,5,12,160,8,12,10,12,12,12,163,9,12,1,13,1,13,3,13,167,8,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,176,8,13,1,14,1,14,1,14,1,14,1,
		14,3,14,183,8,14,1,14,0,1,24,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		0,0,207,0,30,1,0,0,0,2,34,1,0,0,0,4,51,1,0,0,0,6,79,1,0,0,0,8,81,1,0,0,
		0,10,91,1,0,0,0,12,93,1,0,0,0,14,99,1,0,0,0,16,101,1,0,0,0,18,106,1,0,
		0,0,20,126,1,0,0,0,22,128,1,0,0,0,24,153,1,0,0,0,26,175,1,0,0,0,28,182,
		1,0,0,0,30,32,3,4,2,0,31,33,3,2,1,0,32,31,1,0,0,0,32,33,1,0,0,0,33,1,1,
		0,0,0,34,35,5,8,0,0,35,40,3,14,7,0,36,37,5,7,0,0,37,39,3,14,7,0,38,36,
		1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,43,1,0,0,0,42,40,
		1,0,0,0,43,44,5,6,0,0,44,3,1,0,0,0,45,47,3,8,4,0,46,45,1,0,0,0,46,47,1,
		0,0,0,47,48,1,0,0,0,48,50,3,6,3,0,49,46,1,0,0,0,50,53,1,0,0,0,51,49,1,
		0,0,0,51,52,1,0,0,0,52,5,1,0,0,0,53,51,1,0,0,0,54,55,5,12,0,0,55,60,3,
		14,7,0,56,57,5,7,0,0,57,59,3,14,7,0,58,56,1,0,0,0,59,62,1,0,0,0,60,58,
		1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,5,6,0,0,64,80,
		1,0,0,0,65,75,3,18,9,0,66,67,5,12,0,0,67,72,3,14,7,0,68,69,5,7,0,0,69,
		71,3,14,7,0,70,68,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,
		76,1,0,0,0,74,72,1,0,0,0,75,66,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,
		78,5,6,0,0,78,80,1,0,0,0,79,54,1,0,0,0,79,65,1,0,0,0,80,7,1,0,0,0,81,82,
		3,18,9,0,82,85,5,2,0,0,83,86,3,10,5,0,84,86,3,12,6,0,85,83,1,0,0,0,85,
		84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,
		90,5,40,0,0,90,9,1,0,0,0,91,92,5,39,0,0,92,11,1,0,0,0,93,94,5,41,0,0,94,
		95,5,38,0,0,95,96,5,42,0,0,96,13,1,0,0,0,97,100,3,18,9,0,98,100,3,16,8,
		0,99,97,1,0,0,0,99,98,1,0,0,0,100,15,1,0,0,0,101,102,3,24,12,0,102,103,
		3,20,10,0,103,104,3,24,12,0,104,17,1,0,0,0,105,107,5,11,0,0,106,105,1,
		0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,110,5,14,0,0,109,108,1,0,0,0,
		109,110,1,0,0,0,110,111,1,0,0,0,111,117,5,32,0,0,112,114,5,19,0,0,113,
		115,3,22,11,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,118,
		5,20,0,0,117,112,1,0,0,0,117,118,1,0,0,0,118,19,1,0,0,0,119,127,5,25,0,
		0,120,127,5,30,0,0,121,127,5,26,0,0,122,127,5,27,0,0,123,127,5,28,0,0,
		124,127,5,29,0,0,125,127,5,31,0,0,126,119,1,0,0,0,126,120,1,0,0,0,126,
		121,1,0,0,0,126,122,1,0,0,0,126,123,1,0,0,0,126,124,1,0,0,0,126,125,1,
		0,0,0,127,21,1,0,0,0,128,131,3,24,12,0,129,130,5,7,0,0,130,132,3,22,11,
		0,131,129,1,0,0,0,131,132,1,0,0,0,132,23,1,0,0,0,133,134,6,12,-1,0,134,
		140,5,32,0,0,135,137,5,19,0,0,136,138,3,22,11,0,137,136,1,0,0,0,137,138,
		1,0,0,0,138,139,1,0,0,0,139,141,5,20,0,0,140,135,1,0,0,0,140,141,1,0,0,
		0,141,154,1,0,0,0,142,154,5,4,0,0,143,154,5,1,0,0,144,154,5,33,0,0,145,
		154,5,5,0,0,146,147,5,19,0,0,147,148,3,24,12,0,148,149,5,20,0,0,149,154,
		1,0,0,0,150,151,5,14,0,0,151,154,3,24,12,3,152,154,3,26,13,0,153,133,1,
		0,0,0,153,142,1,0,0,0,153,143,1,0,0,0,153,144,1,0,0,0,153,145,1,0,0,0,
		153,146,1,0,0,0,153,150,1,0,0,0,153,152,1,0,0,0,154,161,1,0,0,0,155,156,
		10,1,0,0,156,157,3,28,14,0,157,158,3,24,12,2,158,160,1,0,0,0,159,155,1,
		0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,25,1,0,0,0,163,
		161,1,0,0,0,164,166,5,21,0,0,165,167,3,22,11,0,166,165,1,0,0,0,166,167,
		1,0,0,0,167,168,1,0,0,0,168,176,5,22,0,0,169,170,5,21,0,0,170,171,3,24,
		12,0,171,172,5,10,0,0,172,173,3,24,12,0,173,174,5,22,0,0,174,176,1,0,0,
		0,175,164,1,0,0,0,175,169,1,0,0,0,176,27,1,0,0,0,177,183,5,13,0,0,178,
		183,5,14,0,0,179,183,5,15,0,0,180,183,5,17,0,0,181,183,5,16,0,0,182,177,
		1,0,0,0,182,178,1,0,0,0,182,179,1,0,0,0,182,180,1,0,0,0,182,181,1,0,0,
		0,183,29,1,0,0,0,24,32,40,46,51,60,72,75,79,85,87,99,106,109,114,117,126,
		131,137,140,153,161,166,175,182
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
