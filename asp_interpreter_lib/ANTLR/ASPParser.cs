//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/Desktop/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/ANTLR/ASP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, NUMBER=2, ANONYMOUS_VARIABLE=3, DOT=4, COMMA=5, QUERY_MARK=6, 
		COLON=7, SEMICOLON=8, OR=9, NAF=10, CONS=11, PLUS=12, MINUS=13, TIMES=14, 
		POW=15, DIV=16, AT=17, PAREN_OPEN=18, PAREN_CLOSE=19, SQUARE_OPEN=20, 
		SQUARE_CLOSE=21, CURLY_OPEN=22, CURLY_CLOSE=23, EQUAL=24, LESS=25, GREATER=26, 
		LESS_OR_EQ=27, GREATER_OR_EQ=28, DISUNIFICATION=29, IS=30, ID=31, VARIABLE=32, 
		COMMENT=33, MULTI_LINE_COMMENT=34, BLANK=35, NEWLINE=36, TAB=37, WS=38;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_goal = 4, RULE_binary_operation = 5, RULE_literal = 6, RULE_binary_operator = 7, 
		RULE_terms = 8, RULE_term = 9, RULE_list = 10, RULE_arithop = 11;
	public static readonly string[] ruleNames = {
		"program", "query", "statements", "statement", "goal", "binary_operation", 
		"literal", "binary_operator", "terms", "term", "list", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'_'", "'.'", "','", "'?'", "':'", "';'", "'|'", "'not'", 
		"':-'", "'+'", "'-'", "'*'", "'**'", "'/'", "'@'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", "'<'", "'>'", "'<='", "'>='", "'\\='", "'is'", 
		null, null, null, null, null, null, "'\\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", "TIMES", "POW", 
		"DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
		"CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "DISUNIFICATION", "IS", "ID", "VARIABLE", "COMMENT", 
		"MULTI_LINE_COMMENT", "BLANK", "NEWLINE", "TAB", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ASPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ASPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			statements();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147492864L) != 0)) {
				{
				State = 25;
				query();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(ASPParser.QUERY_MARK, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			literal();
			State = 29;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 31;
					statement();
					}
					} 
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(ASPParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext[] goal() {
			return GetRuleContexts<GoalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoalContext goal(int i) {
			return GetRuleContext<GoalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				Match(CONS);
				State = 38;
				goal();
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 39;
					Match(COMMA);
					State = 40;
					goal();
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 46;
				Match(DOT);
				}
				break;
			case NAF:
			case MINUS:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				literal();
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 49;
					Match(CONS);
					{
					State = 50;
					goal();
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 51;
						Match(COMMA);
						State = 52;
						goal();
						}
						}
						State = 57;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
				}

				State = 60;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operationContext binary_operation() {
			return GetRuleContext<Binary_operationContext>(0);
		}
		public GoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoalContext goal() {
		GoalContext _localctx = new GoalContext(Context, State);
		EnterRule(_localctx, 8, RULE_goal);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				binary_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_operatorContext binary_operator() {
			return GetRuleContext<Binary_operatorContext>(0);
		}
		public Binary_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operationContext binary_operation() {
		Binary_operationContext _localctx = new Binary_operationContext(Context, State);
		EnterRule(_localctx, 10, RULE_binary_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			term(0);
			State = 69;
			binary_operator();
			State = 70;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(ASPParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAF) {
				{
				State = 72;
				Match(NAF);
				}
			}

			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 75;
				Match(MINUS);
				}
			}

			State = 78;
			Match(ID);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAREN_OPEN) {
				{
				State = 79;
				Match(PAREN_OPEN);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
					{
					State = 80;
					terms();
					}
				}

				State = 83;
				Match(PAREN_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operatorContext : ParserRuleContext {
		public Binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator; } }
	 
		public Binary_operatorContext() { }
		public virtual void CopyFrom(Binary_operatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(ASPParser.LESS_OR_EQ, 0); }
		public LessOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(ASPParser.GREATER_OR_EQ, 0); }
		public GreaterOrEqOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(ASPParser.IS, 0); }
		public IsOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisunificationOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISUNIFICATION() { return GetToken(ASPParser.DISUNIFICATION, 0); }
		public DisunificationOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisunificationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ASPParser.LESS, 0); }
		public LessOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ASPParser.GREATER, 0); }
		public GreaterOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOperationContext : Binary_operatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ASPParser.EQUAL, 0); }
		public EqualityOperationContext(Binary_operatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operatorContext binary_operator() {
		Binary_operatorContext _localctx = new Binary_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_binary_operator);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				_localctx = new EqualityOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(EQUAL);
				}
				break;
			case DISUNIFICATION:
				_localctx = new DisunificationOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(DISUNIFICATION);
				}
				break;
			case LESS:
				_localctx = new LessOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88;
				Match(LESS);
				}
				break;
			case GREATER:
				_localctx = new GreaterOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				Match(GREATER);
				}
				break;
			case LESS_OR_EQ:
				_localctx = new LessOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 90;
				Match(LESS_OR_EQ);
				}
				break;
			case GREATER_OR_EQ:
				_localctx = new GreaterOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 91;
				Match(GREATER_OR_EQ);
				}
				break;
			case IS:
				_localctx = new IsOperationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 92;
				Match(IS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ASPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 16, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			term(0);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 96;
				Match(COMMA);
				State = 97;
				terms();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegatedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NegatedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ASPParser.STRING, 0); }
		public StringTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public BasicTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticOperationTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public ArithmeticOperationTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousVariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS_VARIABLE() { return GetToken(ASPParser.ANONYMOUS_VARIABLE, 0); }
		public AnonymousVariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ASPParser.NUMBER, 0); }
		public NumberTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ASPParser.VARIABLE, 0); }
		public VariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new BasicTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 101;
				Match(ID);
				State = 107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 102;
					Match(PAREN_OPEN);
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
						{
						State = 103;
						terms();
						}
					}

					State = 106;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110;
				Match(STRING);
				}
				break;
			case VARIABLE:
				{
				_localctx = new VariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111;
				Match(VARIABLE);
				}
				break;
			case ANONYMOUS_VARIABLE:
				{
				_localctx = new AnonymousVariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112;
				Match(ANONYMOUS_VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				_localctx = new ParenthesizedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(PAREN_OPEN);
				State = 114;
				term(0);
				State = 115;
				Match(PAREN_CLOSE);
				}
				break;
			case MINUS:
				{
				_localctx = new NegatedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(MINUS);
				State = 118;
				term(3);
				}
				break;
			case SQUARE_OPEN:
				{
				_localctx = new ListTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationTermContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 122;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 123;
					arithop();
					State = 124;
					term(2);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
	 
		public ListContext() { }
		public virtual void CopyFrom(ListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConventionalListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public ConventionalListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConventionalList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecursiveListContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(ASPParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ASPParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(ASPParser.SQUARE_CLOSE, 0); }
		public RecursiveListContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursiveList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 20, RULE_list);
		int _la;
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ConventionalListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(SQUARE_OPEN);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6443769870L) != 0)) {
					{
					State = 132;
					terms();
					}
				}

				State = 135;
				Match(SQUARE_CLOSE);
				}
				break;
			case 2:
				_localctx = new RecursiveListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(SQUARE_OPEN);
				State = 137;
				term(0);
				State = 138;
				Match(OR);
				State = 139;
				term(0);
				State = 140;
				Match(SQUARE_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
	 
		public ArithopContext() { }
		public virtual void CopyFrom(ArithopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimesOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ASPParser.TIMES, 0); }
		public TimesOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		public MinusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ASPParser.POW, 0); }
		public PowerOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ASPParser.PLUS, 0); }
		public PlusOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOperationContext : ArithopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ASPParser.DIV, 0); }
		public DivOperationContext(ArithopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithop);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new MinusOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(MINUS);
				}
				break;
			case TIMES:
				_localctx = new TimesOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				Match(TIMES);
				}
				break;
			case DIV:
				_localctx = new DivOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 147;
				Match(DIV);
				}
				break;
			case POW:
				_localctx = new PowerOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 148;
				Match(POW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,152,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,3,0,27,8,0,1,1,1,1,1,1,
		1,2,5,2,33,8,2,10,2,12,2,36,9,2,1,3,1,3,1,3,1,3,5,3,42,8,3,10,3,12,3,45,
		9,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,54,8,3,10,3,12,3,57,9,3,3,3,59,8,3,
		1,3,1,3,3,3,63,8,3,1,4,1,4,3,4,67,8,4,1,5,1,5,1,5,1,5,1,6,3,6,74,8,6,1,
		6,3,6,77,8,6,1,6,1,6,1,6,3,6,82,8,6,1,6,3,6,85,8,6,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,94,8,7,1,8,1,8,1,8,3,8,99,8,8,1,9,1,9,1,9,1,9,3,9,105,8,9,
		1,9,3,9,108,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,121,8,
		9,1,9,1,9,1,9,1,9,5,9,127,8,9,10,9,12,9,130,9,9,1,10,1,10,3,10,134,8,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,143,8,10,1,11,1,11,1,11,1,11,1,
		11,3,11,150,8,11,1,11,0,1,18,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,173,
		0,24,1,0,0,0,2,28,1,0,0,0,4,34,1,0,0,0,6,62,1,0,0,0,8,66,1,0,0,0,10,68,
		1,0,0,0,12,73,1,0,0,0,14,93,1,0,0,0,16,95,1,0,0,0,18,120,1,0,0,0,20,142,
		1,0,0,0,22,149,1,0,0,0,24,26,3,4,2,0,25,27,3,2,1,0,26,25,1,0,0,0,26,27,
		1,0,0,0,27,1,1,0,0,0,28,29,3,12,6,0,29,30,5,6,0,0,30,3,1,0,0,0,31,33,3,
		6,3,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,5,1,0,
		0,0,36,34,1,0,0,0,37,38,5,11,0,0,38,43,3,8,4,0,39,40,5,5,0,0,40,42,3,8,
		4,0,41,39,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,46,1,0,
		0,0,45,43,1,0,0,0,46,47,5,4,0,0,47,63,1,0,0,0,48,58,3,12,6,0,49,50,5,11,
		0,0,50,55,3,8,4,0,51,52,5,5,0,0,52,54,3,8,4,0,53,51,1,0,0,0,54,57,1,0,
		0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,58,49,1,0,
		0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,61,5,4,0,0,61,63,1,0,0,0,62,37,1,0,
		0,0,62,48,1,0,0,0,63,7,1,0,0,0,64,67,3,12,6,0,65,67,3,10,5,0,66,64,1,0,
		0,0,66,65,1,0,0,0,67,9,1,0,0,0,68,69,3,18,9,0,69,70,3,14,7,0,70,71,3,18,
		9,0,71,11,1,0,0,0,72,74,5,10,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,76,1,0,
		0,0,75,77,5,13,0,0,76,75,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,84,5,31,
		0,0,79,81,5,18,0,0,80,82,3,16,8,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,
		0,0,0,83,85,5,19,0,0,84,79,1,0,0,0,84,85,1,0,0,0,85,13,1,0,0,0,86,94,5,
		24,0,0,87,94,5,29,0,0,88,94,5,25,0,0,89,94,5,26,0,0,90,94,5,27,0,0,91,
		94,5,28,0,0,92,94,5,30,0,0,93,86,1,0,0,0,93,87,1,0,0,0,93,88,1,0,0,0,93,
		89,1,0,0,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,15,1,0,0,0,95,
		98,3,18,9,0,96,97,5,5,0,0,97,99,3,16,8,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		17,1,0,0,0,100,101,6,9,-1,0,101,107,5,31,0,0,102,104,5,18,0,0,103,105,
		3,16,8,0,104,103,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,108,5,19,
		0,0,107,102,1,0,0,0,107,108,1,0,0,0,108,121,1,0,0,0,109,121,5,2,0,0,110,
		121,5,1,0,0,111,121,5,32,0,0,112,121,5,3,0,0,113,114,5,18,0,0,114,115,
		3,18,9,0,115,116,5,19,0,0,116,121,1,0,0,0,117,118,5,13,0,0,118,121,3,18,
		9,3,119,121,3,20,10,0,120,100,1,0,0,0,120,109,1,0,0,0,120,110,1,0,0,0,
		120,111,1,0,0,0,120,112,1,0,0,0,120,113,1,0,0,0,120,117,1,0,0,0,120,119,
		1,0,0,0,121,128,1,0,0,0,122,123,10,1,0,0,123,124,3,22,11,0,124,125,3,18,
		9,2,125,127,1,0,0,0,126,122,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,
		129,1,0,0,0,129,19,1,0,0,0,130,128,1,0,0,0,131,133,5,20,0,0,132,134,3,
		16,8,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,143,5,21,0,
		0,136,137,5,20,0,0,137,138,3,18,9,0,138,139,5,9,0,0,139,140,3,18,9,0,140,
		141,5,21,0,0,141,143,1,0,0,0,142,131,1,0,0,0,142,136,1,0,0,0,143,21,1,
		0,0,0,144,150,5,12,0,0,145,150,5,13,0,0,146,150,5,14,0,0,147,150,5,16,
		0,0,148,150,5,15,0,0,149,144,1,0,0,0,149,145,1,0,0,0,149,146,1,0,0,0,149,
		147,1,0,0,0,149,148,1,0,0,0,150,23,1,0,0,0,20,26,34,43,55,58,62,66,73,
		76,81,84,93,98,104,107,120,128,133,142,149
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
