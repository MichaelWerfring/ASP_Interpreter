//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/micha/Desktop/4_Semester/Logikprogrammierung/ASP_Interpreter/asp_interpreter_lib/asp_interpreter_lib/ANTLR/ASP.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ASPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, NUMBER=2, ANONYMOUS_VARIABLE=3, DOT=4, COMMA=5, QUERY_MARK=6, 
		COLON=7, SEMICOLON=8, OR=9, NAF=10, CONS=11, PLUS=12, MINUS=13, TIMES=14, 
		DIV=15, AT=16, PAREN_OPEN=17, PAREN_CLOSE=18, SQUARE_OPEN=19, SQUARE_CLOSE=20, 
		CURLY_OPEN=21, CURLY_CLOSE=22, EQUAL=23, LESS=24, GREATER=25, LESS_OR_EQ=26, 
		GREATER_OR_EQ=27, DISUNIFICATION=28, ID=29, VARIABLE=30, COMMENT=31, MULTI_LINE_COMMENT=32, 
		BLANK=33, NEWLINE=34, TAB=35, WS=36;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statements = 2, RULE_statement = 3, 
		RULE_head = 4, RULE_body = 5, RULE_naf_literals = 6, RULE_naf_literal = 7, 
		RULE_classical_literal = 8, RULE_builtin_atom = 9, RULE_binop = 10, RULE_terms = 11, 
		RULE_term = 12, RULE_arithop = 13;
	public static readonly string[] ruleNames = {
		"program", "query", "statements", "statement", "head", "body", "naf_literals", 
		"naf_literal", "classical_literal", "builtin_atom", "binop", "terms", 
		"term", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'_'", "'.'", "','", "'?'", "':'", "';'", "'|'", "'not'", 
		"':-'", "'+'", "'-'", "'*'", "'/'", "'@'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'='", "'<'", "'>'", "'<='", "'>='", "'\\='", null, null, 
		null, null, null, null, "'\\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "NUMBER", "ANONYMOUS_VARIABLE", "DOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "OR", "NAF", "CONS", "PLUS", "MINUS", "TIMES", "DIV", 
		"AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", 
		"CURLY_CLOSE", "EQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", 
		"DISUNIFICATION", "ID", "VARIABLE", "COMMENT", "MULTI_LINE_COMMENT", "BLANK", 
		"NEWLINE", "TAB", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ASP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ASPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ASPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ASPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			statements();
			State = 29;
			query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(ASPParser.QUERY_MARK, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			classical_literal();
			State = 32;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 34;
					statement();
					}
					} 
				}
				State = 39;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(ASPParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ASPParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(CONS);
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610753038L) != 0)) {
					{
					State = 41;
					body();
					}
				}

				State = 44;
				Match(DOT);
				}
				break;
			case MINUS:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45;
				head();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 46;
					Match(CONS);
					State = 48;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610753038L) != 0)) {
						{
						State = 47;
						body();
						}
					}

					}
				}

				State = 52;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 8, RULE_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ASPParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ASPParser.COMMA, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			naf_literal();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 59;
				Match(COMMA);
				State = 60;
				naf_literal();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal() {
			return GetRuleContext<Naf_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ASPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalsContext naf_literals() {
			return GetRuleContext<Naf_literalsContext>(0);
		}
		public Naf_literalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalsContext naf_literals() {
		Naf_literalsContext _localctx = new Naf_literalsContext(Context, State);
		EnterRule(_localctx, 12, RULE_naf_literals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			naf_literal();
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 67;
				Match(COMMA);
				State = 68;
				naf_literals();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(ASPParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_atomContext builtin_atom() {
			return GetRuleContext<Builtin_atomContext>(0);
		}
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 14, RULE_naf_literal);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 71;
					Match(NAF);
					}
				}

				State = 74;
				classical_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				builtin_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Classical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public Classical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Classical_literalContext classical_literal() {
		Classical_literalContext _localctx = new Classical_literalContext(Context, State);
		EnterRule(_localctx, 16, RULE_classical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 78;
				Match(MINUS);
				}
			}

			State = 81;
			Match(ID);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAREN_OPEN) {
				{
				State = 82;
				Match(PAREN_OPEN);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610752014L) != 0)) {
					{
					State = 83;
					terms();
					}
				}

				State = 86;
				Match(PAREN_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public Builtin_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_atomContext builtin_atom() {
		Builtin_atomContext _localctx = new Builtin_atomContext(Context, State);
		EnterRule(_localctx, 18, RULE_builtin_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			term(0);
			State = 90;
			binop();
			State = 91;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
	 
		public BinopContext() { }
		public virtual void CopyFrom(BinopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(ASPParser.LESS_OR_EQ, 0); }
		public LessOrEqOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(ASPParser.GREATER_OR_EQ, 0); }
		public GreaterOrEqOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisunificationOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISUNIFICATION() { return GetToken(ASPParser.DISUNIFICATION, 0); }
		public DisunificationOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisunificationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ASPParser.LESS, 0); }
		public LessOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ASPParser.GREATER, 0); }
		public GreaterOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOperationContext : BinopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ASPParser.EQUAL, 0); }
		public EqualityOperationContext(BinopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 20, RULE_binop);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				_localctx = new EqualityOperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				Match(EQUAL);
				}
				break;
			case DISUNIFICATION:
				_localctx = new DisunificationOperationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(DISUNIFICATION);
				}
				break;
			case LESS:
				_localctx = new LessOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 95;
				Match(LESS);
				}
				break;
			case GREATER:
				_localctx = new GreaterOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				Match(GREATER);
				}
				break;
			case LESS_OR_EQ:
				_localctx = new LessOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				Match(LESS_OR_EQ);
				}
				break;
			case GREATER_OR_EQ:
				_localctx = new GreaterOrEqOperationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 98;
				Match(GREATER_OR_EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ASPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 22, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			term(0);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 102;
				Match(COMMA);
				State = 103;
				terms();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegatedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NegatedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ASPParser.STRING, 0); }
		public StringTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ASPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public BasicTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticOperationTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public ArithmeticOperationTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(ASPParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(ASPParser.PAREN_CLOSE, 0); }
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousVariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS_VARIABLE() { return GetToken(ASPParser.ANONYMOUS_VARIABLE, 0); }
		public AnonymousVariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ASPParser.NUMBER, 0); }
		public NumberTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ASPParser.VARIABLE, 0); }
		public VariableTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new BasicTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 107;
				Match(ID);
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 108;
					Match(PAREN_OPEN);
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610752014L) != 0)) {
						{
						State = 109;
						terms();
						}
					}

					State = 112;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116;
				Match(STRING);
				}
				break;
			case VARIABLE:
				{
				_localctx = new VariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(VARIABLE);
				}
				break;
			case ANONYMOUS_VARIABLE:
				{
				_localctx = new AnonymousVariableTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				Match(ANONYMOUS_VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				_localctx = new ParenthesizedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(PAREN_OPEN);
				State = 120;
				term(0);
				State = 121;
				Match(PAREN_CLOSE);
				}
				break;
			case MINUS:
				{
				_localctx = new NegatedTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123;
				Match(MINUS);
				State = 124;
				term(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationTermContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 127;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 128;
					arithop();
					State = 129;
					term(2);
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ASPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ASPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(ASPParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ASPParser.DIV, 0); }
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IASPVisitor<TResult> typedVisitor = visitor as IASPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 26, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,36,139,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,1,1,1,1,1,1,2,5,2,36,8,2,10,2,12,2,39,9,2,1,3,1,3,3,3,43,8,3,1,3,1,
		3,1,3,1,3,3,3,49,8,3,3,3,51,8,3,1,3,1,3,3,3,55,8,3,1,4,1,4,1,5,1,5,1,5,
		5,5,62,8,5,10,5,12,5,65,9,5,1,6,1,6,1,6,3,6,70,8,6,1,7,3,7,73,8,7,1,7,
		1,7,3,7,77,8,7,1,8,3,8,80,8,8,1,8,1,8,1,8,3,8,85,8,8,1,8,3,8,88,8,8,1,
		9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,100,8,10,1,11,1,11,1,
		11,3,11,105,8,11,1,12,1,12,1,12,1,12,3,12,111,8,12,1,12,3,12,114,8,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,126,8,12,1,12,1,
		12,1,12,1,12,5,12,132,8,12,10,12,12,12,135,9,12,1,13,1,13,1,13,0,1,24,
		14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,1,1,0,12,15,151,0,28,1,0,0,0,
		2,31,1,0,0,0,4,37,1,0,0,0,6,54,1,0,0,0,8,56,1,0,0,0,10,58,1,0,0,0,12,66,
		1,0,0,0,14,76,1,0,0,0,16,79,1,0,0,0,18,89,1,0,0,0,20,99,1,0,0,0,22,101,
		1,0,0,0,24,125,1,0,0,0,26,136,1,0,0,0,28,29,3,4,2,0,29,30,3,2,1,0,30,1,
		1,0,0,0,31,32,3,16,8,0,32,33,5,6,0,0,33,3,1,0,0,0,34,36,3,6,3,0,35,34,
		1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,5,1,0,0,0,39,37,1,
		0,0,0,40,42,5,11,0,0,41,43,3,10,5,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,
		1,0,0,0,44,55,5,4,0,0,45,50,3,8,4,0,46,48,5,11,0,0,47,49,3,10,5,0,48,47,
		1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,46,1,0,0,0,50,51,1,0,0,0,51,52,
		1,0,0,0,52,53,5,4,0,0,53,55,1,0,0,0,54,40,1,0,0,0,54,45,1,0,0,0,55,7,1,
		0,0,0,56,57,3,16,8,0,57,9,1,0,0,0,58,63,3,14,7,0,59,60,5,5,0,0,60,62,3,
		14,7,0,61,59,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,11,1,
		0,0,0,65,63,1,0,0,0,66,69,3,14,7,0,67,68,5,5,0,0,68,70,3,12,6,0,69,67,
		1,0,0,0,69,70,1,0,0,0,70,13,1,0,0,0,71,73,5,10,0,0,72,71,1,0,0,0,72,73,
		1,0,0,0,73,74,1,0,0,0,74,77,3,16,8,0,75,77,3,18,9,0,76,72,1,0,0,0,76,75,
		1,0,0,0,77,15,1,0,0,0,78,80,5,13,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,81,
		1,0,0,0,81,87,5,29,0,0,82,84,5,17,0,0,83,85,3,22,11,0,84,83,1,0,0,0,84,
		85,1,0,0,0,85,86,1,0,0,0,86,88,5,18,0,0,87,82,1,0,0,0,87,88,1,0,0,0,88,
		17,1,0,0,0,89,90,3,24,12,0,90,91,3,20,10,0,91,92,3,24,12,0,92,19,1,0,0,
		0,93,100,5,23,0,0,94,100,5,28,0,0,95,100,5,24,0,0,96,100,5,25,0,0,97,100,
		5,26,0,0,98,100,5,27,0,0,99,93,1,0,0,0,99,94,1,0,0,0,99,95,1,0,0,0,99,
		96,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,21,1,0,0,0,101,104,3,24,12,
		0,102,103,5,5,0,0,103,105,3,22,11,0,104,102,1,0,0,0,104,105,1,0,0,0,105,
		23,1,0,0,0,106,107,6,12,-1,0,107,113,5,29,0,0,108,110,5,17,0,0,109,111,
		3,22,11,0,110,109,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,114,5,18,
		0,0,113,108,1,0,0,0,113,114,1,0,0,0,114,126,1,0,0,0,115,126,5,2,0,0,116,
		126,5,1,0,0,117,126,5,30,0,0,118,126,5,3,0,0,119,120,5,17,0,0,120,121,
		3,24,12,0,121,122,5,18,0,0,122,126,1,0,0,0,123,124,5,13,0,0,124,126,3,
		24,12,2,125,106,1,0,0,0,125,115,1,0,0,0,125,116,1,0,0,0,125,117,1,0,0,
		0,125,118,1,0,0,0,125,119,1,0,0,0,125,123,1,0,0,0,126,133,1,0,0,0,127,
		128,10,1,0,0,128,129,3,26,13,0,129,130,3,24,12,2,130,132,1,0,0,0,131,127,
		1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,25,1,0,0,0,
		135,133,1,0,0,0,136,137,7,0,0,0,137,27,1,0,0,0,18,37,42,48,50,54,63,69,
		72,76,79,84,87,99,104,110,113,125,133
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
